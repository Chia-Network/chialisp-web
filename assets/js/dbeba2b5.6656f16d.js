(self.webpackChunkchialisp_web=self.webpackChunkchialisp_web||[]).push([[70],{4624:(e,s,t)=>{"use strict";t.r(s),t.d(s,{assets:()=>o,contentTitle:()=>c,default:()=>x,frontMatter:()=>l,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"operators","title":"Operators","description":"This is a basic description of each operator. If you want tangible examples for how to use them, check out the Examples page.","source":"@site/docs/operators.md","sourceDirName":".","slug":"/operators","permalink":"/operators","draft":false,"unlisted":false,"editUrl":"https://github.com/Chia-Network/chialisp-web/blob/main/docs/operators.md","tags":[],"version":"current","frontMatter":{"id":"operators","title":"Operators","slug":"/operators"},"sidebar":"someSidebar","previous":{"title":"Modern Chialisp","permalink":"/modern-chialisp"},"next":{"title":"Examples","permalink":"/examples"}}');var r=t(4848),n=t(8453),d=t(3823);const l={id:"operators",title:"Operators",slug:"/operators"},c=void 0,o={},h=[{value:"Chialisp Modules",id:"chialisp-modules",level:2},{value:"Arithmetic",id:"arithmetic",level:2},{value:"Negative Division",id:"negative-division",level:3},{value:"Comparison",id:"comparison",level:2},{value:"Control Flow",id:"control-flow",level:2},{value:"If Operator",id:"if-operator",level:3},{value:"Evaluation",id:"evaluation",level:2},{value:"Environment Operator",id:"environment-operator",level:3},{value:"Lists",id:"lists",level:2},{value:"Atoms",id:"atoms",level:2},{value:"BLS12-381",id:"bls12-381",level:2},{value:"Softfork",id:"softfork",level:2},{value:"CHIP-0011 Operators",id:"chip-0011-operators",level:2}];function a(e){const s={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(s.p,{children:["This is a basic description of each operator. If you want tangible examples for how to use them, check out the ",(0,r.jsx)(s.a,{href:"/examples",children:"Examples page"}),"."]}),"\n",(0,r.jsxs)(s.admonition,{type:"note",children:[(0,r.jsxs)(s.p,{children:["The operators in the ",(0,r.jsx)(s.a,{href:"#chialisp-modules",children:"Modules section"}),", as well as ",(0,r.jsx)(s.code,{children:"if"}),", ",(0,r.jsx)(s.code,{children:"qq"}),", and ",(0,r.jsx)(s.code,{children:"unquote"})," are only part of Chialisp, not the compiled CLVM representation."]}),(0,r.jsx)(s.p,{children:"Additionally, they do not have an intrinsic cost, since they are compiled to CLVM and not actually executed on their own."})]}),"\n",(0,r.jsx)(s.h2,{id:"chialisp-modules",children:"Chialisp Modules"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Statement"}),(0,r.jsx)(s.th,{children:"Format"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"mod"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(mod A B)"})}),(0,r.jsx)(s.td,{children:"Compiles module with args A and body B."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"include"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(include A.clib)"})}),(0,r.jsx)(s.td,{children:"Includes file A containing a list of statements."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"defun"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(defun A B C)"})}),(0,r.jsx)(s.td,{children:"Function named A with args B and body C."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"defun-inline"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(defun-inline A B C)"})}),(0,r.jsx)(s.td,{children:"Inline function named A with args B and body C."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"lambda"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(lambda A B)"})}),(0,r.jsx)(s.td,{children:"Lambda function with args A and body B."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"defmacro"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(defmacro A B C)"})}),(0,r.jsx)(s.td,{children:"Macro named A with args B and body C."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"defconstant"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(defconstant A B)"})}),(0,r.jsx)(s.td,{children:"Constant A with value B."})]})]})]}),"\n",(0,r.jsx)(s.h2,{id:"arithmetic",children:"Arithmetic"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Operator"}),(0,r.jsx)(s.th,{children:"Format"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"+"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(+ A B ...)"})}),(0,r.jsx)(s.td,{children:"Adds multiple atoms."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"-"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(- A B ...)"})}),(0,r.jsx)(s.td,{children:"Subtracts multiple atoms."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"*"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(* A B ...)"})}),(0,r.jsx)(s.td,{children:"Multiplies multiple atoms."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"/"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(/ A B)"})}),(0,r.jsx)(s.td,{children:"Divides two atoms. Rounds towards negative infinity."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"divmod"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(divmod A B)"})}),(0,r.jsx)(s.td,{children:"Calculates quotient and remainder in cons pair."})]})]})]}),"\n",(0,r.jsx)(s.h3,{id:"negative-division",children:"Negative Division"}),"\n",(0,r.jsx)(s.admonition,{type:"info",children:(0,r.jsxs)(s.p,{children:["In earlier versions of Chia, the ",(0,r.jsx)(s.code,{children:"/"})," operator produced incorrect rounding when\nused with negative numbers. It was disabled in a ",(0,r.jsx)(s.a,{href:"https://www.chia.net/2022/03/04/divided-we-fork.en.html",children:"soft-fork at block height\n2,300,000"}),". It was\nenabled again in the hard fork, with correct behavior. It always rounds towards\nnegative infinity."]})}),"\n",(0,r.jsx)(s.h2,{id:"comparison",children:"Comparison"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Operator"}),(0,r.jsx)(s.th,{children:"Format"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"="}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(= A B)"})}),(0,r.jsx)(s.td,{children:"True if both atoms are equal."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:">"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(> A B)"})}),(0,r.jsx)(s.td,{children:"True if the first atom is greater as a number."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:">s"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(>s A B)"})}),(0,r.jsx)(s.td,{children:"True if the first atom is greater as a string of bytes."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"not"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(not A)"})}),(0,r.jsx)(s.td,{children:"True if the atom is false."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"all"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(all A B ...)"})}),(0,r.jsx)(s.td,{children:"True if all of the atoms are non-zero."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"any"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(any A B ...)"})}),(0,r.jsx)(s.td,{children:"True if any of the atoms are non-zero."})]})]})]}),"\n",(0,r.jsx)(s.h2,{id:"control-flow",children:"Control Flow"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Operator"}),(0,r.jsx)(s.th,{children:"Format"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"if"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(if A B C)"})}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:"Chialisp only"})," - If A is true, then B, otherwise C. Lazy evaluated."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["i - ",(0,r.jsx)(s.em,{children:"if"})]}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(i A B C)"})}),(0,r.jsx)(s.td,{children:"If A is true, then B, otherwise C."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["x - ",(0,r.jsx)(s.em,{children:"exit"})]}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(x ...)"})}),(0,r.jsx)(s.td,{children:"Terminate the program with zero or more values."})]})]})]}),"\n",(0,r.jsx)(s.h3,{id:"if-operator",children:"If Operator"}),"\n",(0,r.jsxs)(s.admonition,{type:"note",children:[(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"if"})," operator is lazy evaluated. This means that code paths are not evaluated unless they need to be."]}),(0,r.jsxs)(s.p,{children:["Usually this is the intended behavior, but if it isn't, you can use the ",(0,r.jsx)(s.code,{children:"i"})," operator instead."]}),(0,r.jsxs)(s.p,{children:["If you would like to replicate the lazy evaluation of the ",(0,r.jsx)(s.code,{children:"if"})," operator in CLVM, you can wrap the ",(0,r.jsx)(s.code,{children:"i"})," operator like this:"]}),(0,r.jsx)(d.A,{flavor:"clvm",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-chialisp",children:"(a (i (q . 1) (q q . 'abc') (q q . 'xyz')) 1)\n"})})}),(0,r.jsx)(s.p,{children:"Essentially, this runs the branch the condition matches as a program (with the current environment). Depending on how much code is executed in each branch, this may be more cost effective than executing both branches."})]}),"\n",(0,r.jsx)(s.h2,{id:"evaluation",children:"Evaluation"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Operator"}),(0,r.jsx)(s.th,{children:"Format"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["qq - ",(0,r.jsx)(s.em,{children:"quasi-quote"})]}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(qq A)"})}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:"Chialisp only"})," - Quote an expression except for anything inside ",(0,r.jsx)(s.code,{children:"unquote"}),"."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"unquote"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(unquote A)"})}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:"Chialisp only"})," - Unquote an expression nested within ",(0,r.jsx)(s.code,{children:"qq"}),"."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["q - ",(0,r.jsx)(s.em,{children:"quote"})]}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(q . A)"})}),(0,r.jsx)(s.td,{children:"Treats A as a value rather than a program."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["a - ",(0,r.jsx)(s.em,{children:"apply"})]}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(a A B)"})}),(0,r.jsx)(s.td,{children:"Evaluate value A as a program with value B as its environment."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["@ - ",(0,r.jsx)(s.em,{children:"environment"})]}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(@ A)"})}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:"Chialisp only"})," - Access value A from the environment."]})]})]})]}),"\n",(0,r.jsx)(s.h3,{id:"environment-operator",children:"Environment Operator"}),"\n",(0,r.jsx)(s.admonition,{type:"note",children:(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"@"})," operator acts in a similar fashion to unquoted atoms in CLVM. If ",(0,r.jsx)(s.code,{children:"@"})," is used plainly as a value, its value is the whole environment."]})}),"\n",(0,r.jsx)(s.h2,{id:"lists",children:"Lists"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Operator"}),(0,r.jsx)(s.th,{children:"Format"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["f - ",(0,r.jsx)(s.em,{children:"first"})]}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(f A)"})}),(0,r.jsx)(s.td,{children:"First value in list A."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["r - ",(0,r.jsx)(s.em,{children:"rest"})]}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(r A)"})}),(0,r.jsx)(s.td,{children:"Rest of the values in list A."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["c - ",(0,r.jsx)(s.em,{children:"cons"})]}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(c A B)"})}),(0,r.jsx)(s.td,{children:"Cons pair of A and B, or prepend A to list B."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["l - ",(0,r.jsx)(s.em,{children:"list predicate"})]}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(l A)"})}),(0,r.jsx)(s.td,{children:"True if A is a list, not nil. Can be used to check length."})]})]})]}),"\n",(0,r.jsx)(s.h2,{id:"atoms",children:"Atoms"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Operator"}),(0,r.jsx)(s.th,{children:"Format"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"sha256"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(sha256 A B ...)"})}),(0,r.jsx)(s.td,{children:"Calculates the sha256 hash of the atoms."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"concat"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(concat A B ...)"})}),(0,r.jsx)(s.td,{children:"Concatenates the bytes of the atoms."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"strlen"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(strlen A)"})}),(0,r.jsx)(s.td,{children:"Returns the length of the atom."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"substr"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(substr A B C)"})}),(0,r.jsx)(s.td,{children:"Slice of bytes A between B and C, exclusive."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"logand"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(logand A B ...)"})}),(0,r.jsx)(s.td,{children:"Bitwise and of the atoms."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"logior"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(logior A B ...)"})}),(0,r.jsx)(s.td,{children:"Bitwise logical or of the atoms."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"logxor"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(logxor A B ...)"})}),(0,r.jsx)(s.td,{children:"Bitwise xor of the atoms."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"lognot"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(lognot A)"})}),(0,r.jsx)(s.td,{children:"Bitwise not of A."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["ash - ",(0,r.jsx)(s.em,{children:"arithmetic shift"})]}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(ash A B)"})}),(0,r.jsx)(s.td,{children:"Arithmetic shift A by B bits."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:["lsh - ",(0,r.jsx)(s.em,{children:"logical shift"})]}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(lsh A B)"})}),(0,r.jsx)(s.td,{children:"Logical shift A by B bits."})]})]})]}),"\n",(0,r.jsx)(s.h2,{id:"bls12-381",children:"BLS12-381"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Operator"}),(0,r.jsx)(s.th,{children:"Format"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"point_add"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(point_add p1 p2 ...)"})}),(0,r.jsxs)(s.td,{children:["Adds two or more G1 points (public keys) together. Renamed to g1_add in ",(0,r.jsx)(s.a,{href:"#chip-0011-operators",children:"CHIP-0011"}),"."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"pubkey_for_exp"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(pubkey_for_exp A)"})}),(0,r.jsx)(s.td,{children:"Maps an exponent (secret key) to a G1 point (public key)."})]})]})]}),"\n",(0,r.jsx)(s.h2,{id:"softfork",children:"Softfork"}),"\n",(0,r.jsxs)(s.p,{children:["The purpose of the ",(0,r.jsx)(s.code,{children:"softfork"})," operator is to enable the ability to define new CLVM operators without creating a hard fork. For example, suppose we want to add secp256k1 operators like ",(0,r.jsx)(s.code,{children:"+s"})," for adding two points on this ECDSA curve for bitcoin compatibility. We can't just do this in vanilla CLVM, because that would make the program ",(0,r.jsx)(s.code,{children:"(+s A B)"})," return different values before and after the soft fork. So instead, we can hide it under ",(0,r.jsx)(s.code,{children:"softfork"}),"."]}),"\n",(0,r.jsx)(s.p,{children:"The syntax is defined as follows:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-chialisp",children:"(softfork cost extension program arguments)\n"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["The ",(0,r.jsx)(s.code,{children:"cost"})," must equal the cost of executing the program with the specified arguments, otherwise an exception is raised. The minimum cost of the operator is 140."]}),"\n",(0,r.jsxs)(s.li,{children:["The ",(0,r.jsx)(s.code,{children:"extension"})," is an unsigned (up to 32-bit in size) integer indicating the set of extensions available in the softfork guard."]}),"\n",(0,r.jsxs)(s.li,{children:["The ",(0,r.jsx)(s.code,{children:"program"})," is executed with the specified ",(0,r.jsx)(s.code,{children:"arguments"}),". The output is always either null or termination of the program if it failed."]}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["Here is a CLVM example using the ",(0,r.jsx)(s.code,{children:"coinid"})," operator described in the ",(0,r.jsx)(s.a,{href:"#chip-0011-operators",children:"CHIP-0011 Operators"})," section:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-chialisp",children:"(softfork\n  (q . 1265)  ; expected cost (including cost of softfork itself)\n  (q . 0)     ; extension 0\n  (q a        ; defer execution of if-branches\n    (i\n      (=\n        (coinid\n          (q . 0x1234500000000000000000000000000000000000000000000000000000000000)\n          (q . 0x6789abcdef000000000000000000000000000000000000000000000000000000)\n          (q . 123456789)\n        )\n        (q . 0x69bfe81b052bfc6bd7f3fb9167fec61793175b897c16a35827f947d5cc98e4bc)\n      )\n      (q . 0) ; if coin ID matches, return 0\n      (q x)   ; if coin ID mismatches, raise\n    )\n    (q . ())) ; environment to apply\n  (q . ())    ; environment to softfork\n)\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Pre-softfork, this always passes and returns ",(0,r.jsx)(s.code,{children:"()"})," at a cost of ",(0,r.jsx)(s.code,{children:"cost"})," (or 140, whichever is higher)."]}),"\n",(0,r.jsxs)(s.p,{children:["Post-softfork, this also returns ",(0,r.jsx)(s.code,{children:"()"})," at a cost of ",(0,r.jsx)(s.code,{children:"cost"}),", but may also fail if the coin id doesn't match. We can't export the result outside the ",(0,r.jsx)(s.code,{children:"softfork"})," boundary, but we can compare it to something inside and raise if it doesn't match."]}),"\n",(0,r.jsxs)(s.p,{children:["We take the cost of running the program inside the ",(0,r.jsx)(s.code,{children:"softfork"})," boundary and ensure it exactly matches ",(0,r.jsx)(s.code,{children:"cost"}),", and raise an exception if it's wrong. That way, the program really does have the same cost pre-softfork and post-softfork (or it fails post-softfork)."]}),"\n",(0,r.jsxs)(s.h2,{id:"chip-0011-operators",children:[(0,r.jsx)(s.a,{href:"https://github.com/Chia-Network/chips/blob/main/CHIPs/chip-0011.md",children:"CHIP-0011"})," Operators"]}),"\n",(0,r.jsxs)(s.admonition,{type:"info",children:[(0,r.jsxs)(s.p,{children:["These operators will be usable within the ",(0,r.jsx)(s.code,{children:"softfork"})," operator starting at block height 4,510,000."]}),(0,r.jsx)(s.p,{children:"At block height 5,496,000, the operators can be used directly as well."})]}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Operator"}),(0,r.jsx)(s.th,{children:"Format"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"g1_add"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(g1_add p1 p2 ...)"})}),(0,r.jsx)(s.td,{children:"Adds two or more G1 points (public keys) together."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"g1_subtract"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(g1_subtract p1 p2 ...)"})}),(0,r.jsx)(s.td,{children:"Subtracts one or more G1 points (public keys) from a base G1 point."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"g1_multiply"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(g1_multiply p1 p2)"})}),(0,r.jsx)(s.td,{children:"Multiplies a G1 point (public key) by a scalar value."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"g1_negate"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(g1_negate point)"})}),(0,r.jsx)(s.td,{children:"Negates a G1 point (public key)."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"g2_add"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(g2_add p1 p2 ...)"})}),(0,r.jsx)(s.td,{children:"Adds two or more G2 points (signatures) together."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"g2_subtract"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(g2_subtract p1 p2 ...)"})}),(0,r.jsx)(s.td,{children:"Subtracts one or more G2 points (signatures) from a base G2 point."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"g2_multiply"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(g2_multiply p1 p2)"})}),(0,r.jsx)(s.td,{children:"Multiplies a G2 point (signature) by a scalar value."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"g2_negate"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(g2_negate point)"})}),(0,r.jsx)(s.td,{children:"Negates a G2 point (signature)."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"g1_map"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(g1_map data dst)"})}),(0,r.jsx)(s.td,{children:"Hashes the data to a G1 point with sha256 and ExpandMsgXmd. DST is optional."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"g2_map"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(g2_map data dst)"})}),(0,r.jsx)(s.td,{children:"Hashes the data to a G2 point with sha256 and ExpandMsgXmd. DST is optional."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"bls_pairing_identity"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(bls_pairing_identity g1 g2 ...)"})}),(0,r.jsx)(s.td,{children:"Returns nil if the pairing of all pairs is the identity, otherwise raises an exception."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"bls_verify"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(bls_verify g2 g1 msg ...)"})}),(0,r.jsx)(s.td,{children:"Nil if signature g2 is valid with public key g1 and message, otherwise raises an exception."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"coinid"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(coinid parent_id puzzle_hash amount)"})}),(0,r.jsx)(s.td,{children:"Validates inputs and calculates the coin id with a parent coin id, puzzle hash, and amount."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"modpow"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(modpow base exponent modulus)"})}),(0,r.jsxs)(s.td,{children:["Computes ",(0,r.jsx)(s.code,{children:"(base ^ exponent) % modulus"}),". Base may be negative, exponent must not be, modulus must not be 0."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"%"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(% numerator denominator)"})}),(0,r.jsx)(s.td,{children:"Computes the remainder of the numerator divided by the denominator."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"secp256k1_verify"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(secp256k1_verify pubkey msg_hash signature)"})}),(0,r.jsx)(s.td,{children:"Verifies a signature that uses the secp256k1 curve."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"secp256r1_verify"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"(secp256r1_verify pubkey msg_hash signature)"})}),(0,r.jsx)(s.td,{children:"Verifies a signature that uses the secp256r1 curve."})]})]})]})]})}function x(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},3823:(e,s,t)=>{"use strict";t.d(s,{A:()=>g});var i=t(5293),r=t(11),n=t(1765),d=t(6540),l=t(5604),c=t(6069),o=t.n(c),h=t(5871),a=t.n(h),x=t(9031),j=t.n(x);function p(e){return e instanceof Array||(0,d.isValidElement)(e)?d.Children.toArray(e).reduce(((e,s)=>{let t="";return t=(0,d.isValidElement)(s)&&m(s)?p(s.props.children):(0,d.isValidElement)(s)&&!m(s)?"":u(s),e.concat(t)}),""):u(e)}function u(e){return null==e||"boolean"==typeof e||"{}"===JSON.stringify(e)?"":e.toString()}function m(e){return(0,d.isValidElement)(e)&&Boolean(e.props.children)}var f=t(4848);function g(e){let{children:s,flavor:t,input:c,tests:o,reporter:h}=e;const{colorMode:x}=(0,i.G)(),u=(0,d.useMemo)((()=>p(s).trim()),[]),[m,g]=(0,d.useState)(u),[y,v]=(0,d.useState)(c??Object.keys(o??{})[0]?.trim()??""),[w,A]=(0,d.useState)(""),[k,C]=(0,d.useState)(0n),[B,_]=(0,d.useState)(null),q=e=>e.replace("Error: ",""),T=(e,s)=>{try{return e.run(s)}catch(t){return A(`While evaluating: ${q(""+t)}`),null}},S=()=>{const e=(()=>{try{return r.Program.fromSource(m)}catch(e){return A(`While parsing: ${q(""+e)}`),null}})();if(!e)return;const s="clvm"===t||e.isCons&&e.first.equals(r.Program.fromText("mod")),i=(e=>{if(t&&"chialisp"!==t)return e;try{return e.compile().value}catch(s){return A(`While compiling: ${q(""+s)}`),null}})(e);if(!i)return;const n=y?r.Program.fromSource(y):r.Program.nil,d=s?T(i,n):{value:i,cost:0n};d&&(A(d.value.toSource()),C(d.cost));let l=!0;for(const[t,c]of Object.entries(o??{})){const e=r.Program.fromSource(t),n=s?T(i,e)?.value:i;if(!n||n.toSource()!==c){l=!1;break}}h?.(l),_(l)},F=B?l.CMH:l.QCr,[M,I]=d.useState(!1);return(0,d.useEffect)((()=>I(!0)),[]),(0,f.jsx)(n.f4,{Prism:globalThis.Prism,theme:M&&("dark"===x?a():j()),code:m,language:"chialisp",children:e=>{let{className:s,style:i}=e;return(0,f.jsxs)("pre",{className:s,style:{...i,position:"relative"},children:[y?(0,f.jsxs)(f.Fragment,{children:[(0,f.jsx)(b,{code:y,setCode:v,language:"chialisp"}),(0,f.jsx)("hr",{style:{marginTop:"14px",marginBottom:"14px"}})]}):"",(0,f.jsx)(b,{code:m,setCode:g,language:"chialisp"}),(0,f.jsx)("div",{style:{position:"absolute",top:"16px",right:"16px"},children:(0,f.jsxs)("div",{style:{display:"flex",alignItems:"center",gap:"14px"},children:[(0,f.jsx)("span",{style:{marginRight:"8px"},children:t&&"chialisp"!==t?"CLVM":"Chialisp"}),!y&&(0,f.jsx)(l.TlQ,{size:24,className:"icon-button",cursor:"pointer",onClick:()=>v("()")}),(0,f.jsx)(l.gSK,{size:24,className:"icon-button",cursor:"pointer",onClick:S})]})}),w?(0,f.jsxs)(f.Fragment,{children:[(0,f.jsx)("hr",{style:{marginTop:"14px",marginBottom:"14px"}}),(0,f.jsx)("div",{style:{display:"inline-block"},children:(0,f.jsx)(b,{code:w,language:"chialisp"})}),w&&(0,f.jsxs)(f.Fragment,{children:[(0,f.jsx)("div",{style:{display:"inline-block",position:"absolute",right:"60px"},children:(0,f.jsx)(b,{code:`Cost: ${k}`,language:"chialisp"})}),(0,f.jsx)(F,{size:24,color:B?"#77FF77":"#FF7777",style:{position:"absolute",bottom:"16px",right:"16px"}})]})]}):""]})}})}function b(e){let{code:s,setCode:t,language:r}=e;const{colorMode:l}=(0,i.G)(),[c,h]=d.useState(!1);return(0,d.useEffect)((()=>h(!0)),[]),(0,f.jsx)(f.Fragment,{children:(0,f.jsx)(n.f4,{Prism:globalThis.Prism,theme:c&&("dark"===l?a():j()),code:s,language:r,children:e=>{let{tokens:i,getLineProps:r,getTokenProps:n}=e,d=i.map(((e,s)=>(0,f.jsx)("div",{...r({line:e}),children:e.map(((e,s)=>(0,f.jsx)("span",{...n({token:e})},s)))},s)));return t?(0,f.jsx)(o(),{value:s,onValueChange:e=>t(e),highlight:()=>d,padding:0}):d}})})}},5871:e=>{e.exports={plain:{color:"#F8F8F2",backgroundColor:"#282A36",fontWeight:"bold"},styles:[{types:["keyword"],style:{color:"rgb(189, 147, 249)"}},{types:["listop","class-name","quotes"],style:{color:"rgb(80, 250, 123)"}},{types:["builtin"],style:{color:"rgb(5, 227, 223)"}},{types:["number","hexadecimal","string","boolean"],style:{color:"rgb(255, 184, 108)",fontWeight:"normal"}},{types:["punctuation","symbol"],style:{color:"rgb(248, 248, 242)"}},{types:["variable"],style:{fontStyle:"italic"}},{types:["comment"],style:{color:"rgb(98, 114, 164)",fontWeight:"normal"}},{types:["function","car"],style:{color:"rgb(241, 250, 140)"}}]}},9031:e=>{e.exports={plain:{color:"#383a42",backgroundColor:"#fafafa",fontWeight:"bold"},styles:[{types:["keyword"],style:{color:"#990096"}},{types:["listop","class-name","quotes"],style:{color:"#006100"}},{types:["builtin"],style:{color:"#127EAF"}},{types:["number","hexadecimal","string","boolean"],style:{color:"#B35C00",fontWeight:"normal"}},{types:["punctuation","symbol"],style:{color:"#383a42"}},{types:["variable"],style:{fontStyle:"italic"}},{types:["comment"],style:{color:"#73737D",fontWeight:"normal"}},{types:["function","car"],style:{color:"#0045DB"}}]}}}]);