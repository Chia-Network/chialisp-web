"use strict";(self.webpackChunkchialisp_web=self.webpackChunkchialisp_web||[]).push([[997],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),s=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,u=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,h=d["".concat(u,".").concat(m)]||d[m]||p[m]||l;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=d;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5862:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return p}});var a=n(7462),r=n(3366),l=(n(7294),n(3905)),i=["components"],o={id:"commands",title:"Commands",slug:"/commands"},u=void 0,s={unversionedId:"commands",id:"commands",title:"Commands",description:"Chialisp has a set of commands that make developing, compiling, and running programs easy.",source:"@site/docs/commands.md",sourceDirName:".",slug:"/commands",permalink:"/commands",draft:!1,editUrl:"https://github.com/Chia-Network/{{ REPOSITORY_NAME }}/blob/main/docs/commands.md",tags:[],version:"current",frontMatter:{id:"commands",title:"Commands",slug:"/commands"},sidebar:"someSidebar",previous:{title:"Introduction",permalink:"/"},next:{title:"Syntax",permalink:"/syntax"}},c={},p=[{value:"Chia Dev Tools",id:"chia-dev-tools",level:2},{value:"Retrieve",id:"retrieve",level:3},{value:"Build",id:"build",level:3},{value:"Curry",id:"curry",level:3},{value:"Uncurry",id:"uncurry",level:3},{value:"Disassemble",id:"disassemble",level:3},{value:"Tree Hash",id:"tree-hash",level:3},{value:"Chialisp",id:"chialisp",level:2},{value:"Compile",id:"compile",level:3},{value:"Run",id:"run",level:3},{value:"Serialize",id:"serialize",level:3},{value:"Deserialize",id:"deserialize",level:3}],d={toc:p};function m(e){var t=e.components,n=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Chialisp has a set of commands that make developing, compiling, and running programs easy."),(0,l.kt)("p",null,"You will need to install ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/Chia-Network/chia-dev-tools"},"chia-dev-tools")," globally or inside of a virtual environment to get started."),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"This is a brief overview of each command. If you want more information, use ",(0,l.kt)("inlineCode",{parentName:"p"},"-h")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"--help")," on a given command.")),(0,l.kt)("h2",{id:"chia-dev-tools"},"Chia Dev Tools"),(0,l.kt)("h3",{id:"retrieve"},"Retrieve"),(0,l.kt)("p",null,"You can use this command to get one or more of the default library files:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cdv clsp retrieve condition_codes sha256tree # ...\n")),(0,l.kt)("p",null,"Here is a list of things you can retrieve:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Library"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"condition_codes"),(0,l.kt)("td",{parentName:"tr",align:null},"Condition opcode constants.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"curry_and_treehash"),(0,l.kt)("td",{parentName:"tr",align:null},"Utilities for currying puzzle hashes.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"sha256tree"),(0,l.kt)("td",{parentName:"tr",align:null},"A function that tree hashes a value.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"singleton_truths"),(0,l.kt)("td",{parentName:"tr",align:null},"Truth struct functions for singletons.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"utility_macros"),(0,l.kt)("td",{parentName:"tr",align:null},"Some helpful utility macros.")))),(0,l.kt)("h3",{id:"build"},"Build"),(0,l.kt)("p",null,"You can build your programs like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cdv clsp build # Builds all files in the directory.\ncdv clsp build program.clsp # Builds a single file.\n")),(0,l.kt)("p",null,"When you use the ",(0,l.kt)("inlineCode",{parentName:"p"},"include")," operator, it will look for files in the ",(0,l.kt)("inlineCode",{parentName:"p"},"include")," folder by default."),(0,l.kt)("p",null,"You can add more include directories like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cdv clsp build program.clsp --include libraries\n")),(0,l.kt)("p",null,"You can also use ",(0,l.kt)("inlineCode",{parentName:"p"},"-i")," instead of ",(0,l.kt)("inlineCode",{parentName:"p"},"--include")," if you prefer."),(0,l.kt)("h3",{id:"curry"},"Curry"),(0,l.kt)("p",null,"You can ",(0,l.kt)("a",{parentName:"p",href:"https://docs.chia.net/guides/chialisp-currying"},"curry")," values into your program like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cdv clsp curry program.clsp --args '0xCAFEF00D' --args '(hello there)'\n")),(0,l.kt)("p",null,"You can also use ",(0,l.kt)("inlineCode",{parentName:"p"},"-a")," instead of ",(0,l.kt)("inlineCode",{parentName:"p"},"--args")," if you prefer."),(0,l.kt)("h3",{id:"uncurry"},"Uncurry"),(0,l.kt)("p",null,"You can reverse the currying process of compiled CLVM like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cdv clsp uncurry compiled.clvm\n")),(0,l.kt)("h3",{id:"disassemble"},"Disassemble"),(0,l.kt)("p",null,"You can convert compiled CLVM back into the readable form like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cdv clsp disassemble compiled.clvm\n")),(0,l.kt)("h3",{id:"tree-hash"},"Tree Hash"),(0,l.kt)("p",null,"You can calculate the tree hash (analagous to puzzle hash) of compiled CLVM like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cdv clsp treehash compiled.clvm\n")),(0,l.kt)("h2",{id:"chialisp"},"Chialisp"),(0,l.kt)("h3",{id:"compile"},"Compile"),(0,l.kt)("p",null,"You can use this command to directly compile Chialisp into CLVM:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"run program.clsp\n")),(0,l.kt)("p",null,"However, you will need to include libraries manually:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"run program.clsp --include include\n")),(0,l.kt)("p",null,"You can also use ",(0,l.kt)("inlineCode",{parentName:"p"},"-i")," instead of ",(0,l.kt)("inlineCode",{parentName:"p"},"--include")," if you prefer."),(0,l.kt)("h3",{id:"run"},"Run"),(0,l.kt)("p",null,"You can execute bytecode directly on CLVM like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"brun compiled.clvm\n")),(0,l.kt)("p",null,"Or if you have the serialized form:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"brun --hex compiled.clvm.hex\n")),(0,l.kt)("p",null,"You can also use ",(0,l.kt)("inlineCode",{parentName:"p"},"-x")," instead of ",(0,l.kt)("inlineCode",{parentName:"p"},"--hex")," if you prefer."),(0,l.kt)("p",null,"Note that if you want to run it with an environment (analagous to solution), you can do so like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"brun compiled.clvm '(arguments here)'\n")),(0,l.kt)("h3",{id:"serialize"},"Serialize"),(0,l.kt)("p",null,"You can serialize CLVM into bytecode like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"opc 'CLVM'\n")),(0,l.kt)("p",null,"Note that you cannot use a file with this command."),(0,l.kt)("h3",{id:"deserialize"},"Deserialize"),(0,l.kt)("p",null,"You can deserialize bytecode into CLVM like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"opd 'bytecode'\n")),(0,l.kt)("p",null,"Note that you cannot use a file with this command."))}m.isMDXComponent=!0}}]);