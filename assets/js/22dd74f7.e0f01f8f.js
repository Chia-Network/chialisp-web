"use strict";(self.webpackChunkchialisp_web=self.webpackChunkchialisp_web||[]).push([[567],{5226:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"someSidebar":[{"type":"link","label":"Introduction","href":"/","docId":"intro","unlisted":false},{"type":"category","label":"Chialisp Primer","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"1. Intro to Chialisp","href":"/chialisp-primer/intro","docId":"chialisp-primer/intro","unlisted":false},{"type":"link","label":"2. Using Modules","href":"/chialisp-using-modules","docId":"chialisp-primer/using-modules","unlisted":false},{"type":"link","label":"3. Testnet Setup","href":"/chialisp-testnet-setup","docId":"chialisp-primer/testnet-setup","unlisted":false},{"type":"link","label":"4. First Smart Coin","href":"/chialisp-first-smart-coin","docId":"chialisp-primer/first-smart-coin","unlisted":false},{"type":"link","label":"5. BLS Signatures","href":"/chialisp-bls-signatures","docId":"chialisp-primer/bls-signatures","unlisted":false}],"href":"/chialisp-primer"},{"type":"category","label":"Chialisp Concepts","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Currying","href":"/chialisp-currying","docId":"chialisp-concepts/currying","unlisted":false},{"type":"link","label":"Inner Puzzles","href":"/chialisp-inner-puzzles","docId":"chialisp-concepts/inner-puzzles","unlisted":false},{"type":"link","label":"Condition Morphing","href":"/chialisp-condition-morphing","docId":"chialisp-concepts/condition-morphing","unlisted":false}],"href":"/chialisp-concepts"},{"type":"link","label":"Commands","href":"/commands","docId":"commands","unlisted":false},{"type":"link","label":"Syntax","href":"/syntax","docId":"syntax","unlisted":false},{"type":"link","label":"Modern Chialisp","href":"/modern-chialisp","docId":"modern-chialisp","unlisted":false},{"type":"link","label":"Operators","href":"/operators","docId":"operators","unlisted":false},{"type":"link","label":"Examples","href":"/examples","docId":"examples","unlisted":false},{"type":"link","label":"Costs","href":"/costs","docId":"costs","unlisted":false},{"type":"link","label":"Conditions","href":"/conditions","docId":"conditions","unlisted":false},{"type":"link","label":"Optimization","href":"/optimization","docId":"optimization","unlisted":false},{"type":"link","label":"Common Issues","href":"/common_issues","docId":"common_issues","unlisted":false},{"type":"link","label":"Debugging","href":"/debugging","docId":"debugging","unlisted":false},{"type":"category","label":"Primitives","items":[{"type":"link","label":"Standard Transactions","href":"/standard-transactions","docId":"primitives/standard-transactions","unlisted":false},{"type":"link","label":"Singletons","href":"/singletons","docId":"primitives/singletons","unlisted":false},{"type":"link","label":"CATs","href":"/cats","docId":"primitives/cats","unlisted":false},{"type":"link","label":"NFTs","href":"/nfts","docId":"primitives/nfts","unlisted":false},{"type":"link","label":"DIDs","href":"/dids","docId":"primitives/dids","unlisted":false},{"type":"link","label":"Offers","href":"/offers","docId":"primitives/offers","unlisted":false},{"type":"link","label":"Pooling","href":"/pooling","docId":"primitives/pooling","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"link","label":"CLVM","href":"/clvm","docId":"clvm","unlisted":false}]},"docs":{"chialisp-concepts/condition-morphing":{"id":"chialisp-concepts/condition-morphing","title":"Condition Morphing","description":"You\'ve seen how you can use inner puzzles to output conditions and append them to the output of the outer puzzle. However, sometimes you want to change the output of the inner puzzle to enforce certain rules. This is called condition morphing.","sidebar":"someSidebar"},"chialisp-concepts/currying":{"id":"chialisp-concepts/currying","title":"Currying","description":"When you are writing puzzles in Chialisp you may want to have certain parameters decided before the coins are created. This is called currying. It allows puzzles to be reused but have different content and produce a different hash.","sidebar":"someSidebar"},"chialisp-concepts/inner-puzzles":{"id":"chialisp-concepts/inner-puzzles","title":"Inner Puzzles","description":"Sometimes you want the behavior of your puzzles to be composable, so that you can reuse code in multiple ways. An example of this is the Chia Asset Token puzzle, which allows you to specify an inner puzzle.","sidebar":"someSidebar"},"chialisp-primer/bls-signatures":{"id":"chialisp-primer/bls-signatures","title":"5. BLS Signatures","description":"When creating a spend bundle previously, we have left the aggregated_signature field set to the default value of c0 followed by 190 zeros. This value indicates that there are no signatures. We will detail what signatures are, and how you can use them on the blockchain.","sidebar":"someSidebar"},"chialisp-primer/first-smart-coin":{"id":"chialisp-primer/first-smart-coin","title":"4. First Smart Coin","description":"By now, you should understand what Chialisp is and how you can use it to write programs and modules that can be run on the command-line. In this guide, we are going to write a simple puzzle, use it to lock a coin with a password, and finally spend it. This example is insecure for a variety of reasons which will be explained after, but it\'s a good tool for learning how smart coins work.","sidebar":"someSidebar"},"chialisp-primer/intro":{"id":"chialisp-primer/intro","title":"1. Intro to Chialisp","description":"Chialisp is a language based on Lisp that is used on the Chia blockchain to dictate how and when coins can be spent. It\'s designed to be as simple and efficient as possible, but still provide broad functionality and Turing Completeness.","sidebar":"someSidebar"},"chialisp-primer/testnet-setup":{"id":"chialisp-primer/testnet-setup","title":"3. Testnet Setup","description":"If you haven\'t already, you will need to clone the Chia Blockchain repository, then follow the below steps to set it up and configure it for the testnet.","sidebar":"someSidebar"},"chialisp-primer/using-modules":{"id":"chialisp-primer/using-modules","title":"2. Using Modules","description":"Up to this point, you have written single expressions and evaluated them on the command-line. However, sometimes you want to split your code into multiple functions or include common libraries. In order to do things like that, you will need to understand what modules are.","sidebar":"someSidebar"},"clvm":{"id":"clvm","title":"CLVM","description":"Chialisp is compiled to bytecode, which is executed on the Chialisp Virtual Machine. CLVM is as minimal as possible, and doesn\'t have direct support for language constructs such as functions, constants, and modules.","sidebar":"someSidebar"},"commands":{"id":"commands","title":"Commands","description":"Chialisp has a set of commands that make developing, compiling, and running programs easy.","sidebar":"someSidebar"},"common_issues":{"id":"common_issues","title":"Common Issues","description":"This page contains a list of the most common issues you may encounter when developing applications in Chialisp. This list is by no means comprehensive, and we recommend putting each of your applications through a rigorous code review and audit before deploying them on mainnet. However, by following the guidelines laid out here, you will avoid some common pitfalls that can be easy to overlook.","sidebar":"someSidebar"},"conditions":{"id":"conditions","title":"Conditions","description":"When a coin is spent, its puzzle is executed on the Chialisp Virtual Machine (CLVM). If the program does not fail, it returns a list of conditions. These conditions determine what the outcome of the spend is, and whether or not the spend is valid.","sidebar":"someSidebar"},"costs":{"id":"costs","title":"Costs","description":"Every operator has a cost associated with it. Additionally, there can be a separate cost dependent on the number of arguments or bytes used when calling it.","sidebar":"someSidebar"},"debugging":{"id":"debugging","title":"Debugging","description":"Debugging Chialisp at times can be frustrating. Due to the nature of how it handles data structures, programs will often continue on with incorrect values only to error out at a later spot that gives no clue to the initial breakage. For example, a variable typo will often result in the variable being evaluated as a string, and if that gets hashed into something it\'s impossible to tell.","sidebar":"someSidebar"},"examples":{"id":"examples","title":"Examples","description":"This is a set of examples for various operators. If you want to see their documentation, checkout the Operators page.","sidebar":"someSidebar"},"intro":{"id":"intro","title":"About Chialisp","description":"Chialisp is a pure and functional language with a focus on security and auditability. Chialisp is commonly used on the Chia blockchain to lock funds in smart coins until spent and released by their owner. This enables behavior similar to that of smart contracts.","sidebar":"someSidebar"},"modern-chialisp":{"id":"modern-chialisp","title":"Modern Chialisp","description":"Chialisp can evolve over time and still serve its role in preserving the","sidebar":"someSidebar"},"operators":{"id":"operators","title":"Operators","description":"This is a basic description of each operator. If you want tangible examples for how to use them, check out the Examples page.","sidebar":"someSidebar"},"optimization":{"id":"optimization","title":"Optimization","description":"It is possible to optimize the cost of your programs by making certain changes and keeping things in mind as you write code using the language. Let\'s explore some of these methods now.","sidebar":"someSidebar"},"primitives/cats":{"id":"primitives/cats","title":"CATs","description":"Chia Asset Tokens are fungible tokens that are issued on the Chia blockchain. The CAT puzzle ensures that the supply of a specific CAT never changes unless the rules of issuance specific to that CAT are followed. These are enforced using a separate Chialisp program called the Token and Asset Issuance Limitations (TAIL).","sidebar":"someSidebar"},"primitives/dids":{"id":"primitives/dids","title":"DIDs","description":"DIDs are a decentralized way to represent an identity, be that an organization or a person. It is possible to recover a DID even if the key is lost, by having multiple parties send messages approving the inner puzzle change.","sidebar":"someSidebar"},"primitives/nfts":{"id":"primitives/nfts","title":"NFTs","description":"NFTs are non-fungible tokens that are minted on the Chia blockchain. The NFT puzzle ensures that there is only ever one copy of a given NFT, and it cannot be divided into multiple coins.","sidebar":"someSidebar"},"primitives/offers":{"id":"primitives/offers","title":"Offers","description":"Offers are a way to enable peer-to-peer asset exchange on the Chia blockchain. In other words, you can swap tokens without needing to go through an exchange. Only two parties are required, the maker and the taker. They don\'t need to trust each other, since any attempts to modify the offer will invalidate it.","sidebar":"someSidebar"},"primitives/pooling":{"id":"primitives/pooling","title":"Pooling","description":"The way that Chia Network does pooling is unlike many blockchains that have come before it. Pool operators actually rely on an on-chain smart coin to verify that they will be able to directly claim any potential pool rewards that farmers create.","sidebar":"someSidebar"},"primitives/singletons":{"id":"primitives/singletons","title":"Singletons","description":"Singletons allow you to keep track of the state of something on the blockchain, with the ability to verify and check any part of its history using a unique id. It proves that the puzzle is unique and cannot be duplicated. Singletons can use any arbitrary inner puzzle, and is used to make NFTs, DIDs, the pooling puzzle, and many other things possible.","sidebar":"someSidebar"},"primitives/standard-transactions":{"id":"primitives/standard-transactions","title":"Standard Transactions","description":"The standard transaction is a puzzle used by the Chia wallet to generate its addresses and spend coins within them. It is also used for CATs and NFTs, which simply wrap the standard transaction inside to enforce ownership by the wallet.","sidebar":"someSidebar"},"syntax":{"id":"syntax","title":"Syntax","description":"Chialisp\'s syntax is based on Lisp, but there are some differences. This is a primer on the structure of expressions. Everything in the language shares the same S-expression syntax, including operators and functions.","sidebar":"someSidebar"}}}}')}}]);