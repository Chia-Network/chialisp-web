"use strict";(self.webpackChunkchialisp_web=self.webpackChunkchialisp_web||[]).push([[30],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),c=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=c(e.components);return r.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,u=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=c(t),m=a,f=d["".concat(u,".").concat(m)]||d[m]||p[m]||l;return t?r.createElement(f,o(o({ref:n},s),{},{components:t})):r.createElement(f,o({ref:n},s))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,o=new Array(l);o[0]=d;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var c=2;c<l;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4381:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return p}});var r=t(7462),a=t(3366),l=(t(7294),t(3905)),o=["components"],i={id:"examples",title:"Examples",slug:"/examples"},u=void 0,c={unversionedId:"examples",id:"examples",title:"Examples",description:"This is a set of examples for various operators. If you want to see their documentation, checkout the Operators page.",source:"@site/docs/examples.md",sourceDirName:".",slug:"/examples",permalink:"/examples",draft:!1,editUrl:"https://github.com/Chia-Network/{{ REPOSITORY_NAME }}/blob/main/docs/examples.md",tags:[],version:"current",frontMatter:{id:"examples",title:"Examples",slug:"/examples"},sidebar:"someSidebar",previous:{title:"Operators",permalink:"/operators"},next:{title:"Costs",permalink:"/costs"}},s={},p=[{value:"Modules",id:"modules",level:2},{value:"mod",id:"mod",level:3},{value:"include",id:"include",level:3},{value:"defun",id:"defun",level:3},{value:"defun-inline",id:"defun-inline",level:3},{value:"lambda",id:"lambda",level:3},{value:"defmacro, qq, unquote",id:"defmacro",level:3},{value:"defconstant",id:"defconstant",level:3}],d={toc:p};function m(e){var n=e.components,t=(0,a.Z)(e,o);return(0,l.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"This is a set of examples for various operators. If you want to see their documentation, checkout the ",(0,l.kt)("a",{parentName:"p",href:"/operators"},"Operators page"),"."),(0,l.kt)("h2",{id:"modules"},"Modules"),(0,l.kt)("h3",{id:"mod"},"mod"),(0,l.kt)("p",null,"Compiles an entire program into a single executable expression. You can define other constants within it."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-chialisp"},"(mod (value)\n\n    ;; Doubles the value as the output.\n    (* value 2)\n)\n")),(0,l.kt)("h3",{id:"include"},"include"),(0,l.kt)("p",null,"Includes all of the constants defined in a library file in the module."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cdv clsp retrieve sha256tree\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-chialisp"},"(mod (thing-to-hash)\n\n    ;; Includes the constants defined in the file.\n    (include sha256tree.clib)\n\n    ;; Calls the utility function as the output.\n    (sha256tree thing-to-hash)\n)\n")),(0,l.kt)("h3",{id:"defun"},"defun"),(0,l.kt)("p",null,"Defines a function that can be called from anywhere within the module."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-chialisp"},"(mod ()\n    (defun square (number)\n        ;; Returns the number squared.\n        (* number number)\n    )\n\n    (square 16) ; 256\n)\n")),(0,l.kt)("h3",{id:"defun-inline"},"defun-inline"),(0,l.kt)("p",null,"Defines an inline function that can be called from anywhere within the module. It simply replaces the call with the code within (like an easier to write but limited macro)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-chialisp"},"(mod ()\n    (defun-inline double (number)\n        ;; Returns twice the number.\n        (* number 2)\n    )\n\n    (double 9) ; 18\n)\n")),(0,l.kt)("h3",{id:"lambda"},"lambda"),(0,l.kt)("p",null,"Compiles a block of code into a single executable expression. Useful for writing functions as arguments to other functions."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-chialisp"},"(lambda (n1 n2)\n    ;; Returns the two added together.\n    (+ n1 n2)\n)\n")),(0,l.kt)("h3",{id:"defmacro"},"defmacro, qq, unquote"),(0,l.kt)("p",null,"Defines a macro that can manually structure the source code it is replaced with. Allows for advanced compile time behavior."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-chialisp"}," (defmacro or ARGS\n    (if ARGS\n        (qq (if (unquote (f ARGS))\n            1\n            (unquote (c or (r ARGS)))\n        ))\n    0)\n)\n")),(0,l.kt)("h3",{id:"defconstant"},"defconstant"),(0,l.kt)("p",null,"Defines a constant value that can be referenced by name."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-chialisp"},"(mod ()\n    (defconstant MAGIC_NUMBER 314159)\n\n    MAGIC_NUMBER ; Replaced with the actual value.\n)\n")))}m.isMDXComponent=!0}}]);