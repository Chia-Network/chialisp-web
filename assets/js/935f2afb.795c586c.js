"use strict";(self.webpackChunkchialisp_web=self.webpackChunkchialisp_web||[]).push([[53],{1109:function(e){e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"someSidebar":[{"type":"link","label":"Getting Started","href":"https://devs.chia.net/guides"},{"type":"link","label":"Chialisp Concepts","href":"https://devs.chia.net/guides"},{"type":"link","label":"Introduction","href":"/","docId":"intro"},{"type":"link","label":"Commands","href":"/commands","docId":"commands"},{"type":"link","label":"Syntax","href":"/syntax","docId":"syntax"},{"type":"link","label":"Operators","href":"/operators","docId":"operators"},{"type":"link","label":"Examples","href":"/examples","docId":"examples"},{"type":"link","label":"Costs","href":"/costs","docId":"costs"},{"type":"link","label":"Optimization","href":"/optimization","docId":"optimization"},{"type":"link","label":"Debugging","href":"/debugging","docId":"debugging"},{"type":"category","label":"Primitives","items":[{"type":"link","label":"Standard Transactions","href":"/standard-transactions","docId":"primitives/standard-transactions"},{"type":"link","label":"Singletons","href":"/singletons","docId":"primitives/singletons"},{"type":"link","label":"CATs","href":"/cats","docId":"primitives/cats"},{"type":"link","label":"NFTs","href":"/nfts","docId":"primitives/nfts"},{"type":"link","label":"DIDs","href":"/dids","docId":"primitives/dids"},{"type":"link","label":"Offers","href":"/offers","docId":"primitives/offers"},{"type":"link","label":"Pooling","href":"/pooling","docId":"primitives/pooling"}],"collapsed":true,"collapsible":true},{"type":"link","label":"CLVM","href":"/clvm","docId":"clvm"}]},"docs":{"clvm":{"id":"clvm","title":"CLVM","description":"Chialisp is compiled to bytecode, which is executed on the Chialisp Virtual Machine. CLVM is as minimal as possible, and doesn\'t have direct support for language constructs such as functions, constants, and modules.","sidebar":"someSidebar"},"commands":{"id":"commands","title":"Commands","description":"Chialisp has a set of commands that make developing, compiling, and running programs easy.","sidebar":"someSidebar"},"costs":{"id":"costs","title":"Costs","description":"Every operator has a cost associated with it. Additionally, there can be a separate cost dependent on the number of arguments or bytes used when calling it.","sidebar":"someSidebar"},"debugging":{"id":"debugging","title":"Debugging","description":"Debugging Chialisp at times can be frustrating. Due to the nature of how it handles data structures, programs will often continue on with incorrect values only to error out at a later spot that gives no clue to the initial breakage. For example, a variable typo will often result in the variable being evaluated as a string, and if that gets hashed into something it\'s impossible to tell.","sidebar":"someSidebar"},"examples":{"id":"examples","title":"Examples","description":"This is a set of examples for various operators. If you want to see their documentation, checkout the Operators page.","sidebar":"someSidebar"},"intro":{"id":"intro","title":"About Chialisp","description":"Chialisp is a pure and functional language with a focus on security and auditability. Chialisp is commonly used on the Chia blockchain to lock funds in smart coins until spent and released by their owner. This enables behavior similar to that of smart contracts.","sidebar":"someSidebar"},"operators":{"id":"operators","title":"Operators","description":"This is a basic description of each operator. If you want tangible examples for how to use them, check out the Examples page.","sidebar":"someSidebar"},"optimization":{"id":"optimization","title":"Optimization","description":"It is possible to optimize the cost of your programs by making certain changes and keeping things in mind as you write code using the language. Let\'s explore some of these methods now.","sidebar":"someSidebar"},"primitives/cats":{"id":"primitives/cats","title":"CATs","description":"Chia Asset Tokens are fungible tokens that are issued on the Chia blockchain. The CAT puzzle ensures that the supply of a specific CAT never changes unless the rules of issuance specific to that CAT are followed. These are enforced using a separate Chialisp program called the Token and Asset Issuance Limitations (TAIL).","sidebar":"someSidebar"},"primitives/dids":{"id":"primitives/dids","title":"DIDs","description":"DIDs are a decentralized way to represent an identity, be that an organization or a person. It is possible to recover a DID even if the key is lost, by having multiple parties send messages approving the inner puzzle change.","sidebar":"someSidebar"},"primitives/nfts":{"id":"primitives/nfts","title":"NFTs","description":"NFTs are non-fungible tokens that are minted on the Chia blockchain. The NFT puzzle ensures that there is only ever one copy of a given NFT, and it cannot be divided into multiple coins.","sidebar":"someSidebar"},"primitives/offers":{"id":"primitives/offers","title":"Offers","description":"Offers are a way to enable peer-to-peer asset exchange on the Chia blockchain. In other words, you can swap tokens without needing to go through an exchange. Only two parties are required, the maker and the taker. They don\'t need to trust each other, since any attempts to modify the offer will invalidate it.","sidebar":"someSidebar"},"primitives/pooling":{"id":"primitives/pooling","title":"Pooling","description":"The way that Chia Network does pooling is unlike many blockchains that have come before it. Pool operators actually rely on an on-chain smart coin to verify that they will be able to directly claim any potential pool rewards that farmers create.","sidebar":"someSidebar"},"primitives/singletons":{"id":"primitives/singletons","title":"Singletons","description":"Singletons allow you to keep track of the state of something on the blockchain, with the ability to verify and check any part of its history using a unique id. It proves that the puzzle is unique and cannot be duplicated. Singletons can use any arbitrary inner puzzle, and is used to make NFTs, DIDs, the pooling puzzle, and many other things possible.","sidebar":"someSidebar"},"primitives/standard-transactions":{"id":"primitives/standard-transactions","title":"Standard Transactions","description":"The standard transaction is a puzzle used by the Chia wallet to generate its addresses and spend coins within them. It is also used for CATs and NFTs, which simply wrap the standard transaction inside to enforce ownership by the wallet.","sidebar":"someSidebar"},"syntax":{"id":"syntax","title":"Syntax","description":"Chialisp\'s syntax is based on Lisp, but there are some differences. This is a primer on the structure of expressions. Everything in the language shares the same S-expression syntax, including operators and functions.","sidebar":"someSidebar"}}}')}}]);